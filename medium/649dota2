class Solution {
    public String predictPartyVictory(String senate) {
        //initilaize the queue 
        Queue<Integer> rad = new LinkedList<>();
        Queue<Integer> dir = new LinkedList<>();
        //size of senate used as index
        int n = senate.length();
        //create queue for each team
        for(int i=0; i<n; i++){
            if(senate.charAt(i)=='R'){
                rad.add(i);
            }
            else{
                dir.add(i);
            }
        }
        while(!rad.isEmpty() && !dir.isEmpty()){
            //winner stays in queue and gets requeued
            if(rad.peek() < dir.peek()){
                rad.add(n++);
            }
            else{
                //dir gets pushed
                dir.add(n++);
            }
            rad.remove();
            dir.remove();
        }
        if(rad.isEmpty()){
            return "Dire";
        }else{
            return "Radiant";
        }
    }
}